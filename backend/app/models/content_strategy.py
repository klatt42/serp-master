"""
Content Strategy Data Models
Pydantic models for AI-generated content strategies
"""
from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime
from enum import Enum


class ContentType(str, Enum):
    """Types of content that can be created"""
    BLOG_POST = "blog_post"
    GUIDE = "guide"
    VIDEO = "video"
    INFOGRAPHIC = "infographic"
    PODCAST = "podcast"
    CASE_STUDY = "case_study"
    CHECKLIST = "checklist"
    TEMPLATE = "template"
    EBOOK = "ebook"
    WEBINAR = "webinar"


class Priority(str, Enum):
    """Content priority levels"""
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"


class Difficulty(str, Enum):
    """Estimated content creation difficulty"""
    EASY = "easy"
    MEDIUM = "medium"
    HARD = "hard"


class ContentStatus(str, Enum):
    """Content implementation status"""
    PLANNED = "planned"
    IN_PROGRESS = "in_progress"
    DRAFTED = "drafted"
    REVIEW = "review"
    PUBLISHED = "published"
    UPDATED = "updated"


class ContentPillar(BaseModel):
    """Major content theme/pillar"""
    id: str = Field(..., description="Unique pillar identifier")
    name: str = Field(..., description="Pillar name")
    description: str = Field(..., description="What this pillar covers")
    keywords: List[str] = Field(default_factory=list, description="Core keywords")
    priority: Priority = Field(..., description="Pillar priority")
    total_opportunity: int = Field(default=0, description="Total search volume opportunity")
    cluster_ids: List[int] = Field(default_factory=list, description="Related cluster IDs")


class ContentItem(BaseModel):
    """Individual content piece in strategy"""
    id: str = Field(..., description="Unique content identifier")
    title: str = Field(..., description="Content title")
    pillar_name: str = Field(..., description="Parent pillar")
    content_type: ContentType = Field(..., description="Type of content")
    target_keyword: str = Field(..., description="Primary target keyword")
    supporting_keywords: List[str] = Field(default_factory=list, description="Secondary keywords")
    priority: Priority = Field(..., description="Content priority")
    estimated_difficulty: Difficulty = Field(..., description="Creation difficulty")
    estimated_hours: int = Field(..., description="Estimated hours to create")
    scheduled_date: datetime = Field(..., description="Target publication date")
    optimization_tips: List[str] = Field(default_factory=list, description="SEO optimization tips")
    status: ContentStatus = Field(default=ContentStatus.PLANNED, description="Current status")
    progress_percentage: int = Field(default=0, description="Completion percentage")
    assigned_to: Optional[str] = Field(None, description="Team member assigned")
    notes: Optional[str] = Field(None, description="Additional notes")


class ContentStrategy(BaseModel):
    """Complete content strategy generated by AI"""
    seed_keyword: str = Field(..., description="Original niche keyword")
    generated_at: datetime = Field(..., description="When strategy was generated")
    pillars: List[ContentPillar] = Field(..., description="Content pillars")
    content_items: List[ContentItem] = Field(..., description="All content pieces")
    quick_wins: List[str] = Field(default_factory=list, description="Easy wins to start")
    implementation_notes: str = Field(..., description="Key execution recommendations")
    success_metrics: List[str] = Field(default_factory=list, description="KPIs to track")
    total_pieces: int = Field(..., description="Total content items")
    estimated_total_hours: int = Field(..., description="Total estimated hours")
    timeline_weeks: int = Field(..., description="Timeline in weeks")

    class Config:
        use_enum_values = True


class StrategyGenerationRequest(BaseModel):
    """Request to generate content strategy"""
    seed_keyword: str = Field(..., description="Niche to generate strategy for")
    timeline_weeks: int = Field(default=12, description="Timeline in weeks")
    content_types: List[ContentType] = Field(
        default=[ContentType.BLOG_POST, ContentType.GUIDE, ContentType.VIDEO],
        description="Allowed content types"
    )
    max_pieces_per_week: int = Field(default=2, description="Max content per week")
    focus_areas: Optional[List[str]] = Field(None, description="Specific topics to focus on")

    class Config:
        use_enum_values = True
